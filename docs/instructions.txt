Note: words inside paranthesis "()" are optional

[x] nop;    0x00;   no operation

[x] stc;    ----;   
[x] sti;    0x01;   store (u)int constant on stack
[x] stf;    0x02;   store float constant on stack
[x] stb;    0x03;   store (u)byte constant on stack
[x] stis;   0x04;   store the (u)int at given symbol on stack
[x] stfs;   0x05;   store the float at given symbol on stack
[x] stbs;   0x06;   store the (u)byte at given symbol on stack

[x] ldc;    ----;   
[x] ldi;    0x07;   load (u)int from stack on heap and set &eax to address 
[x] ldf;    0x08;   load float from stack on heap and set &eax to address 
[x] ldb;    0x09;   load (u)byte from stack on heap and set &eax to address 

[x] rda;    ----;   
[x] rdi;    0x0A;   read (u)int from heap on address &ebx and store it on stack
[x] rdf;    0x0B;   read float from heap on address &ebx and store it on stack
[x] rdb;    0x0C;   read (u)byte from heap on address &ebx and store it on stack
[x] rdr;    0x0D;   read the &<given_register> and store it on stack

[x] mov;    ----;
[x] movc;   0x0E;   set register to given constant value
~[ ] movs;   0x0F;   set register to given value of symbol~
[x] movr;   0x10;   set register to given register
[x] movi;   0x11;   set register to the (u)int at top of the stack
[x] movf;   0x12;   set register to the float at top of the stack
[x] movb;   0x13;   set register to the (u)byte at top of the stack

[ ] add;    ----;
[ ] addi;   0x14;   pop and add two integers from stack. push the result. 
[ ] addf;   0x15;   pop and add two floats from stack. push the result. 
[ ] addb;   0x16;   pop and add two bytes from stack. push the result. 

[ ] ads;   ----;
