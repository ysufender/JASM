Note: words inside paranthesis "()" are optional

[x] nop;    0x00;   no operation

[x] stc;    ----;
[x] stt;    0x01;   stores a 32-bit constant on stack
[x] ste;    0x02;   stores an 8-bit constant on stack
[x] stts;   0x03;   stores a 32-bit constant on stack from given symbol
[x] stes;   0x04;   stores an 8-bit constant on stack from given symbol

[x] ldc;    ----;
[x] ldt;    0x05;   load 32-bits from stack on heap and set &eax to address
[x] lde;    0x06;   load 8-bits from stack on heap and set &eax to address

[x] rda;    ----;
[x] rdt;    0x07;   read 32-bits from heap at address &ebx and store it on stack.
[x] rde;    0x08;   read 32-bits from heap at address &ebx and store it on stack.
[x] rdr;    0x09;   read the given register and store it on stack

[x] mov;    ----;
[x] movc;   0x0A;   set register to given constant value
[x] movs;   0x0B;   set register to the value at the top of the stack (based on register size)
[x] movr;   0x0C;   set register to given register

[x] add;    ----;
[x] addi;   0x0D;   pop and add two (u)ints from stack. push the result. 
[x] addf;   0x0E;   pop and add two floats from stack. push the result. 
[x] addb;   0x0F;   pop and add two (u)bytes from stack. push the result. 

[x] addr;   ----;
[x] addri;  0x10;   add the two (u)ints stored in given two registers and set the second one to result
[x] addrf;  0x11;   add the two floats stored in given two registers and set the second to result
[x] addrb;  0x12;   add the two (u)bytes stored in given two registers and set the second one to result

[x] adds;   ----;
[x] addsi;  0x13;   pop and add two (u)ints from stack. DO NOT POP. push the result. 
[x] addsf;  0x14;   pop and add two floats from stack. DO NOT POP. push the result. 
[x] addsb;  0x15;   add two (u)bytes on top of the stack. DO NOT POP. push the result. 

[x] mcp;    0x16;   copy the heap/stack starting at &eax to heap/stack starting at &ebx with the size of &ecx

% The increments are not by one but by a given constant. Must be known at compile time.
[x] inc;    ----;
[x] inci;   0x17;   increment the (u)int at the top of the stack
[x] incf;   0x18;   increment the float at the top of the stack
[x] incb;   0x19;   increment the (u)byte at the top of the stack

[x] incr;   ----;
[x] incri;  0x1A;   increment the (u)int at the given register 
[x] incrf;  0x1B;   increment the float at the given register 
[x] incrb;  0x1C;   increment the (u)byte at the given register 

[x] incs;   ----;
[x] incsi;  0x1D;   increment the (u)int at the top of the stack, don't modify but push
[x] incsf;  0x1E;   increment the float at the top of the stack, don't modify but push
[x] incsb;  0x1F;   increment the (u)byte at the top of the stack, don't modify but push

% The decrements are not by one but by a given constant. Must be known at compile time.
[x] dcr;    ----;
[x] dcri;   0x20;   decrement the (u)int at the top of the stack
[x] dcrf;   0x21;   decrement the float at the top of the stack
[x] dcrb;   0x22;   decrement the (u)byte at the top of the stack

[x] dcrr;   ----;
[x] dcrri;  0x23;   decrement the (u)int at the given register 
[x] dcrrf;  0x24;   decrement the float at the given register 
[x] dcrrb;  0x25;   decrement the (u)byte at the given register 

[x] dcrs;   ----;
[x] dcrsi;  0x26;   decrement the (u)int at the top of the stack, don't modify but push
[x] dcrsf;  0x27;   decrement the float at the top of the stack, don't modify but push
[x] dcrsb;  0x28;   decrement the (u)byte at the top of the stack, don't modify but push

[x] and;    ----;
[x] andst;  0x29;   apply and operation on top 2 32-bits on stack
[x] andse;  0x2A;   apply and operation on top 2 8-bits on stack
[x] andr;   0x2B;   apply and operation on given two registers 

[x] or;     ----;
[x] orst;   0x2C;   apply or operation on top 2 32-bits on stack
[x] orse;   0x2D;   apply or operation on top 2 8-bits on stack
[x] orr;    0x2E;   apply or operation on given two registers

[x] nor;    ----;
[x] norst;  0x2F;   apply nor operation on top 2 32-bits on stack
[x] norse;  0x30;   apply nor operation on top 2 8-bits on stack
[x] norr;   0x31;   apply nor operation on given two registers

[x] swp;    ----;
[x] swpt;   0x32;   swap the top 2 32-bits on stack
[x] swpe;   0x33;   swap the top 2 8-bits on stack
[x] swpr;   0x34;   swap the given registers 

[x] dupt;   0x35;   duplicate the top 32-bits on stack 
[x] dupe;   0x36;   duplicate the top 8-bits on stack 

[x] rom;    ----;   store given series of bytes on ROM

[x] raw;    0x37;   store given series of bytes on stack
[x] raws;   0x38;   store the given number of bytes residing at given symbol 

[x] inv;    ----;   
[x] invt;   0x39;   invert the top 32-bits on stack
[x] inve;   0x3A;   invert the top 8-bits on stack
[x] invr;   0x3B;   invert the given register

[x] invs;   ----;   
[x] invst;  0x3C;
[x] invse;  0x3D;

[x] cmp;    0x3E;   compare the top #-bits by given mode, set &bl to result
[x] cmpr;   0x3F;   compare given two registers by given mode, set &bl to result

[x] pop;    ----;
[x] popt;   0x40;   pop the top 32-bits from stack
[x] pope;   0x41;   pop the top 8-bits from stack

[x] jmp;    0x42;   jump to given address, without creating a callstack 
[x] jmpr;   0x43;   jump to given address at the given register, without creating a callstack

[x] swr;    0x44;   swap the top n bytes

[x] dur;    0x45;   duplicate the top n bytes

[x] rep;    0x46;   repeats the given value given times on heap or stack

[x] alc;    0x47;   sets &ebx to the address of heap that is capable of holding given size of data

[x] pow;    ----;
[x] powri;  0x48;   pow on register with integers
[x] powrf;  0x49;   pow on register with floats 
[x] powrb;  0x4A;   pow on register with bytes 
[x] powsi;  0x4B;   pow on stack with integers
[x] powsf;  0x4C;   pow on stack with floats 
[x] powsb;  0x4D;   pow on stack with bytes 
[x] powi;   0x4E;   pow with constants with integers
[x] powf;   0x4F;   pow with constants with floats 
[x] powb;   0x50;   pow with constants with bytes 
[x] powrui; 0x51;   pow on register with unsigned integers
[x] powrub; 0x52;   pow on register with unsigned bytes 
[x] powsui; 0x53;   pow on stack with unsigned integers
[x] powsub; 0x54;   pow on stack with unsigned bytes 
[x] powui;  0x55;   pow with constants with unsigned integers
[x] powub;  0x56;   pow with constants with unsigned bytes 

[x] sqr;    ----;
[x] sqri;   0x57;   find the square root of given integer constant and store it on stack
[x] sqrf;   0x58;   find the square root of given float constant and store it on stack
[x] sqrb;   0x59;   find the square root of given byte constant and store it on stack
[x] sqrri;  0x5A;   find the square root of given integer in given register and set &eax to it
[x] sqrrf;  0x5B;   find the square root of given float in given register and set &eax to it
[x] sqrrb;  0x5C;   find the square root of given byte in given register and set &al to it
[x] sqrsi;  0x5D;   find the square root of given integer on stack and store it on stack
[x] sqrsf;  0x5E;   find the square root of given float on stack and store it on stack
[x] sqrsb;  0x5F;   find the square root of given byte on stack and store it on stack

[x] cnd;    0x60;   jump to given address if &bl is non-zero
[x] cndr;   0x61;   jump to the address at given register if &bl is non-zero

[x] cal;    0x62;   create a callstack and jump to given address, a byte as parameter size is given
[x] calr;   0x63;   create a callstack and jump to the address at given register, a byte as parameter size is given

[x] mul;    ----;
[x] muli;   0x64;   pop and multiply two (u)ints from stack. push the result. 
[x] mulf;   0x65;   pop and multiply two floats from stack. push the result. 
[x] mulb;   0x66;   pop and multiply two (u)bytes from stack. push the result. 

[x] mulr;   ----;
[x] mulri;  0x67;   multiply the two (u)ints stored in given two registers and set the second one to result
[x] mulrf;  0x68;   multiply the two floats stored in given two registers and set the second to result
[x] mulrb;  0x69;   multiply the two (u)bytes stored in given two registers and set the second one to result

[x] muls;   ----;
[x] mulsi;  0x6A;   pop and multiply two (u)ints from stack. DO NOT POP. push the result. 
[x] mulsf;  0x6B;   pop and multiply two floats from stack. DO NOT POP. push the result. 
[x] mulsb;  0x6C;   multiply two (u)bytes on top of the stack. DO NOT POP. push the result. 

[x] div;    ----;
[x] divi;   0x6D;   pop and divide two (u)ints from stack. push the result. 
[x] divf;   0x6E;   pop and divide two floats from stack. push the result. 
[x] divb;   0x6F;   pop and divide two (u)bytes from stack. push the result. 

[x] divr;   ----;
[x] divri;  0x70;   divide the two (u)ints stored in given two registers and set the second one to result
[x] divrf;  0x71;   divide the two floats stored in given two registers and set the second to result
[x] divrb;  0x72;   divide the two (u)bytes stored in given two registers and set the second one to result

[x] divs;   ----;
[x] divsi;  0x73;   pop and divide two (u)ints from stack. DO NOT POP. push the result. 
[x] divsf;  0x74;   pop and divide two floats from stack. DO NOT POP. push the result. 
[x] divsb;  0x75;   divide two (u)bytes on top of the stack. DO NOT POP. push the result. 

[x] ret;    0x76;   return from the current callstack to 
